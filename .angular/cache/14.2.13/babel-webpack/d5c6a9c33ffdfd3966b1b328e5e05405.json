{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Song } from 'src/app/models/song';\nimport { environment } from 'src/environments/environment';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/services/user.service\";\nimport * as i4 from \"src/app/services/albums.service\";\nimport * as i5 from \"src/app/services/song.service\";\nimport * as i6 from \"@angular/common\";\n\nfunction EditSongComponent_div_0_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵtext(1, \"The title is not valid\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction EditSongComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"h1\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"form\", 4);\n    i0.ɵɵlistener(\"ngSubmit\", function EditSongComponent_div_0_Template_form_ngSubmit_5_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSubmit());\n    });\n    i0.ɵɵelementStart(6, \"p\")(7, \"label\");\n    i0.ɵɵtext(8, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 5);\n    i0.ɵɵtemplate(10, EditSongComponent_div_0_span_10_Template, 2, 0, \"span\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"p\", 7)(12, \"label\");\n    i0.ɵɵtext(13, \"Audio\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"input\", 8);\n    i0.ɵɵlistener(\"change\", function EditSongComponent_div_0_Template_input_change_14_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.fileChangeEvent($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(15, \"input\", 9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 10)(17, \"div\", 11);\n    i0.ɵɵelement(18, \"img\", 12);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Edit \\\"\", ctx_r0.song.name, \"\\\"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.myForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.song.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isValidName());\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.myForm.invalid);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"src\", ctx_r0.url + \"/album/image/\" + ctx_r0.album.image, i0.ɵɵsanitizeUrl);\n  }\n}\n\nexport let EditSongComponent = /*#__PURE__*/(() => {\n  class EditSongComponent {\n    constructor(route, formbuilder, userSvc, router, albumSvc, songSvc) {\n      this.route = route;\n      this.formbuilder = formbuilder;\n      this.userSvc = userSvc;\n      this.router = router;\n      this.albumSvc = albumSvc;\n      this.songSvc = songSvc;\n      this.id = this.route.snapshot.params['id'];\n      this.url = environment.apiUrl;\n      this.charged = false;\n    }\n\n    ngOnInit() {\n      this.getData();\n      this.myForm = this.formbuilder.group({\n        name: ['', Validators.required]\n      });\n      this.charged = true;\n    }\n\n    getData() {\n      this.token = this.userSvc.getToken();\n      this.songSvc.getSong(this.token, this.id).subscribe({\n        next: resp => {\n          this.song = resp.song;\n          this.albumId = this.song.album;\n          this.albumSvc.getAlbum(this.token, this.albumId).subscribe({\n            next: resp => {\n              this.album = resp;\n            },\n\n            error(err) {\n              console.log(err);\n            }\n\n          });\n        },\n        error: err => {\n          Swal.fire({\n            icon: 'error',\n            title: 'Ooops...',\n            text: 'It seems there was an error'\n          });\n          this.router.navigate(['']);\n        }\n      });\n    }\n\n    isAudioFile(file) {\n      var _a;\n\n      const allowedExtensions = ['mp3', 'ogg'];\n      const fileExtension = (_a = file === null || file === void 0 ? void 0 : file.name.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n      return fileExtension !== undefined && allowedExtensions.includes(fileExtension);\n    }\n\n    isValidName() {\n      var _a, _b;\n\n      return ((_a = this.myForm) === null || _a === void 0 ? void 0 : _a.controls['name'].touched) && ((_b = this.myForm) === null || _b === void 0 ? void 0 : _b.controls['name'].errors);\n    }\n\n    fileChangeEvent(file) {\n      this.filesToUpload = file.target.files;\n    }\n\n    makeFileRequest(url, params, files) {\n      return new Promise((resolve, reject) => {\n        const formData = new FormData();\n        const xhr = new XMLHttpRequest();\n\n        for (let i = 0; i < files.length; i++) {\n          formData.append('file', files[i], files[i].name);\n        }\n\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n              resolve(JSON.parse(xhr.responseText));\n            } else {\n              reject(xhr.response);\n            }\n          }\n        };\n\n        xhr.open('POST', url, true);\n        xhr.setRequestHeader('Authorization', this.token);\n        xhr.send(formData);\n      });\n    }\n\n    getFields() {\n      var _a;\n\n      const name = (_a = this.myForm) === null || _a === void 0 ? void 0 : _a.controls['name'].value;\n      let audioToSend;\n\n      if (!this.audio) {\n        audioToSend = this.song.file;\n      } else {\n        if (!this.isAudioFile(this.audio)) {\n          Swal.fire({\n            icon: 'error',\n            title: 'Invalid file',\n            text: 'Please select a valid audio file.'\n          });\n        }\n      }\n\n      const song = new Song(this.song.number, name, this.song.duration, audioToSend, this.albumId);\n      return song;\n    }\n\n    onSubmit() {\n      const song = this.getFields();\n      this.songSvc.editSong(this.token, song, this.id).subscribe({\n        next: resp => {\n          if (this.filesToUpload != null) {\n            this.makeFileRequest(environment.apiUrl + '/song/file/' + resp.song._id, [], this.filesToUpload);\n          }\n\n          Swal.fire({\n            icon: 'success',\n            title: 'Updated!',\n            text: 'Song added successfully'\n          });\n          this.router.navigate(['see-album', this.albumId]);\n        },\n\n        error(err) {\n          Swal.fire({\n            icon: 'error',\n            title: 'Ooops...',\n            text: 'It seems there was an error'\n          });\n        }\n\n      });\n    }\n\n  }\n\n  EditSongComponent.ɵfac = function EditSongComponent_Factory(t) {\n    return new (t || EditSongComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i4.AlbumsService), i0.ɵɵdirectiveInject(i5.SongService));\n  };\n\n  EditSongComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditSongComponent,\n    selectors: [[\"app-edit-song\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"container\", 4, \"ngIf\"], [1, \"container\"], [1, \"content-wrapper\"], [1, \"form-section\"], [1, \"col-md-12\", 3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"formControlName\", \"name\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [1, \"form-group\"], [\"type\", \"file\", 1, \"form-control\", 3, \"change\"], [\"type\", \"submit\", \"value\", \"Send\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"image-section\"], [1, \"centrado\"], [3, \"src\"], [1, \"form-text\", \"text-danger\"]],\n    template: function EditSongComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, EditSongComponent_div_0_Template, 19, 6, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.song && ctx.charged);\n      }\n    },\n    dependencies: [i6.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\".centrado[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center}img[_ngcontent-%COMP%]{border-radius:12%;height:480px;width:550px;margin:1em}.container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:flex-start}.content-wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:row;width:100%;max-width:1200px}.form-section[_ngcontent-%COMP%]{flex:1;padding:20px}.image-section[_ngcontent-%COMP%]{flex:1;display:flex;justify-content:flex-end;align-items:flex-end;padding:20px}.form-control[_ngcontent-%COMP%]{width:100%;margin-bottom:15px;padding:10px;font-size:16px}.btn-primary[_ngcontent-%COMP%]{padding:10px 20px}\"]\n  });\n  return EditSongComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}